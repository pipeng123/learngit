# Default linker command file.
MEMORY {
   	vectorrom     (RX): ORIGIN = 0x00000000, LENGTH = 0x00000040
   	cfmprotrom    (RX): ORIGIN = 0x00000400, LENGTH = 0x00000010

	m_text        (RX) : ORIGIN = 0x00000410, LENGTH = 0x00000Ff0

	m_programbuff (RW) : ORIGIN = 0x1fffff00, LENGTH = 0x00000100
	m_data        (RW) : ORIGIN = 0x20000000, LENGTH = 0x00000200

}

KEEP_SECTION { .vectors_rom, .cfmconfig, .programbuff }


SECTIONS {

 
.vectors :
{
    __VECTOR_TABLE_ROM_START = .;         # Runtime vector table in sram
    *(.vectors_rom)
    . = ALIGN (0x4); 
} > vectorrom


.cfmprotect :
{
    *(.cfmconfig)
    . = ALIGN (0x4);
} > cfmprotrom



.program_buff :
{
     * (.programbuff)
    . = ALIGN (0x4);
} > m_programbuff 


.app_text: 
{
	ALIGNALL(4);
   	* (.init)	
   	* (.text)
		.= ALIGN(0x8) ;
	* (.rodata)
		.= ALIGN(0x4) ;
    ___ROM_AT = .;
} > m_text
.app_data: AT(___ROM_AT)
{
   	* (.sdata)
   	* (.data)
		.= ALIGN(0x4) ;
   	*(.ARM.extab)
		.= ALIGN(0x4) ;
       __exception_table_start__ = .;
   	EXCEPTION
       __exception_table_end__ = .;
		.= ALIGN(0x4) ;
       __sinit__ = .;
   	STATICINIT
	.= ALIGN(0x8) ;
} > m_data
.bss :
{
	.= ALIGN(0x4) ;
	__START_BSS = .;
	* (.bss)
	__END_BSS = .;
	.= ALIGN(0x8) ;
} >> m_data

_romp_at = ___ROM_AT + SIZEOF(.app_data);
.romp : AT(_romp_at)
{
    __S_romp = _romp_at;
    WRITEW(___ROM_AT);
    WRITEW(ADDR(.app_data));
    WRITEW(SIZEOF(.app_data));
    WRITEW(0);
    WRITEW(0);
    WRITEW(0);
}

__BOOT_STACK_ADDRESS = . + 0x00008000;
__heap_addr = __BOOT_STACK_ADDRESS;
__heap_size = 0x00008000;

}
